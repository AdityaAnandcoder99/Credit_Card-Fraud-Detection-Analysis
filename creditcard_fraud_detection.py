# -*- coding: utf-8 -*-
"""Creditcard_Fraud_Detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NDlxpHe1a-FqzyN5DTCSzoL68OL3NmWt
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib
import matplotlib.pyplot as plt
import sklearn
# %matplotlib inline
from sklearn.model_selection import train_test_split

import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split

from sklearn.metrics import classification_report
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LogisticRegression
from sklearn import metrics


from sklearn import metrics
import seaborn as sns

data_df = pd.read_csv('/content/creditcard.csv')

data_df .head()

data_df .shape

data_df[['Amount', 'Time', 'Class']].describe()

data_df.columns

data_df.isna().any

null_columns = pd.DataFrame({'Colummns':data_df.isna().sum().index, 'null values':data_df.  isna().sum().values ,'Percentage':data_df.isna().sum().values/data_df.shape[0]})

null_columns

data_df["Class"].tail(10)

nfcount=0
notFraud=data_df['Class']
for i in range(len(notFraud)):
  if notFraud[i]==0:
    nfcount=nfcount+1

nfcount
per_nf=(nfcount/len(notFraud))*100
print('Percentage of total not fraud transaction in the dataset:',per_nf)

fcount=0
Fraud=data_df['Class']
for i in range(len(Fraud)):
  if Fraud[i]==1:
    fcount=fcount+1

fcount
per_f=(fcount/len(Fraud))*100
print('Percentage of total fraud transaction in the dataset:',per_f)

plot_data=pd.DataFrame()
plot_data['Fraud Transaction']=Fraud
plot_data['Genuine Transaction']=notFraud
plot_data

plt.title("Bar plot for Fraud Vs Genuine Transaction")
sns.barplot(x='Fraud Transaction', y= 'Genuine Transaction', data=plot_data , palette = 'Blues', edgecolor='w')

x=data_df['Amount']
y=data_df['Time']
plt.plot(x,y)
plt.title('Time Vs Amount')
#sns.barplot(X=x, Y=y, data=data, palette = 'Blues', edgecolor='w)

plt.figure(figsize=(16,8))
plt.title('Amount Distribution')
sns.distplot(data_df['Amount'], color='red');

fig, ax= plt.subplots(figsize=(16,8))
ax.scatter(data_df['Amount'], data_df['Time'])
ax.set_xlabel('Amount')
ax.set_ylabel('Time')
plt.show()

correlation_metrics = data_df .corr()
fig = plt.figure(figsize=(16,9))
sns.heatmap(correlation_metrics, vmax = 0.9, square = True)
plt.show()

x=data_df.drop(['Class'], axis = 1)
y=data_df['Class']
xtrain, xtest, ytrain, ytest = train_test_split(x, y, test_size=0.2, random_state=42)

logisticreg = LogisticRegression()
logisticreg.fit (xtrain,ytrain)

y_pred = logisticreg.predict(xtest)
  accuracy=logisticreg.score(xtest,ytest)

cm= metrics.confusion_matrix(ytest ,y_pred )
print (cm)

print('Accuracy score of the Logistic regression model: ', accuracy*100, '%')